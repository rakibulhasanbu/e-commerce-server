generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  SUPER_ADMIN
  ADMIN
  SELLER
  USER
}

enum Gender {
  Male
  Female
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String                 @unique
  password              String
  role                  UserRoles?             @default(USER)
  emailVerified         DateTime?
  isBlocked             Boolean?               @default(false)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image         String?
  profile       UserProfile?
  notifications UserNotification[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model UserProfile {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  phoneNo           String
  gender            Gender? @default(Male)
  yearsOfExperience String?
  country           String?
  district          String?
  address           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Payment {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  courseSlug    String
  batchNo       Int
  userId        String
  transactionId String
  phoneNumber   String
  status        String @default("unpaid")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title           String
  message         String
  notificationFor UserRoles? @default(USER)
  courseSlug      String
  batchNo         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UserNotification[]
}

model UserNotification {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  userId         String @db.ObjectId
  notificationId String @db.ObjectId

  user         User         @relation(fields: [userId], references: [id])
  notification Notification @relation(fields: [notificationId], references: [id])

  @@unique([userId, notificationId], map: "user_notification_unique")
  @@index([userId], map: "user_idx")
  @@index([notificationId], map: "notification_idx")
}
